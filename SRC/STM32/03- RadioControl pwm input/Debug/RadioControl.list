
RadioControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d1c  08002d1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d1c  08002d1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d1c  08002d1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08002d30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08002d30  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c418  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001953  00000000  00000000  0002c44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  0002e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016adf  00000000  00000000  0002f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c263  00000000  00000000  00045f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008683f  00000000  00000000  000521ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8a29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003180  00000000  00000000  000d8a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cd8 	.word	0x08002cd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002cd8 	.word	0x08002cd8

0800014c <motor>:
	}
}
void delay(long int _time){
	for(int i=0; i<_time*1000;i++);
}
void motor(int M1, int M2, int M3, int M4){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
//	M1 -= 2500;
//	M3 -= 500;
//	if(M3 > 20) M3 += 128;
//	if(M4 > 20) M4 += 192;
	if(M1 > MAX_MOTOR_SPEED) M1 = MAX_MOTOR_SPEED;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000160:	4293      	cmp	r3, r2
 8000162:	dd02      	ble.n	800016a <motor+0x1e>
 8000164:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000168:	60fb      	str	r3, [r7, #12]
	if(M1 < 0)   						 M1 = 0;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	2b00      	cmp	r3, #0
 800016e:	da01      	bge.n	8000174 <motor+0x28>
 8000170:	2300      	movs	r3, #0
 8000172:	60fb      	str	r3, [r7, #12]
	if(M2 > MAX_MOTOR_SPEED) M2 = MAX_MOTOR_SPEED;
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	f643 2298 	movw	r2, #15000	; 0x3a98
 800017a:	4293      	cmp	r3, r2
 800017c:	dd02      	ble.n	8000184 <motor+0x38>
 800017e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000182:	60bb      	str	r3, [r7, #8]
	if(M2 < 0)  						 M2 = 0;
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	2b00      	cmp	r3, #0
 8000188:	da01      	bge.n	800018e <motor+0x42>
 800018a:	2300      	movs	r3, #0
 800018c:	60bb      	str	r3, [r7, #8]
	if(M3 > MAX_MOTOR_SPEED) M3 = MAX_MOTOR_SPEED;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000194:	4293      	cmp	r3, r2
 8000196:	dd02      	ble.n	800019e <motor+0x52>
 8000198:	f643 2398 	movw	r3, #15000	; 0x3a98
 800019c:	607b      	str	r3, [r7, #4]
	if(M3 < 0) 							 M3 = 0;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	da01      	bge.n	80001a8 <motor+0x5c>
 80001a4:	2300      	movs	r3, #0
 80001a6:	607b      	str	r3, [r7, #4]
	if(M4 > MAX_MOTOR_SPEED) M4 = MAX_MOTOR_SPEED;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	f643 2298 	movw	r2, #15000	; 0x3a98
 80001ae:	4293      	cmp	r3, r2
 80001b0:	dd02      	ble.n	80001b8 <motor+0x6c>
 80001b2:	f643 2398 	movw	r3, #15000	; 0x3a98
 80001b6:	603b      	str	r3, [r7, #0]
	if(M4 < 0) 							 M4 = 0;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	da01      	bge.n	80001c2 <motor+0x76>
 80001be:	2300      	movs	r3, #0
 80001c0:	603b      	str	r3, [r7, #0]

	TIM1->CCR1 = 16000 + M3; //M3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80001c8:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <motor+0xa8>)
 80001ca:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 16000 + M2; //M2
 80001cc:	68bb      	ldr	r3, [r7, #8]
 80001ce:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <motor+0xa8>)
 80001d4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 16000 + M1; //M1
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <motor+0xa8>)
 80001de:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 16000 + M4; //M4
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <motor+0xa8>)
 80001e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80001ea:	bf00      	nop
 80001ec:	3714      	adds	r7, #20
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40012c00 	.word	0x40012c00

080001f8 <HAL_GPIO_EXTI_Callback>:
	}
	Rx_flag = 1;
	HAL_UART_Receive_IT(&huart1, &bt, 1);
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RC_CH1_INPUT) {
 8000202:	88fb      	ldrh	r3, [r7, #6]
 8000204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000208:	d117      	bne.n	800023a <HAL_GPIO_EXTI_Callback+0x42>
		if(HAL_GPIO_ReadPin(RC_CH1_PORT, RC_CH1_INPUT)){
 800020a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800020e:	486f      	ldr	r0, [pc, #444]	; (80003cc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000210:	f001 f868 	bl	80012e4 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d004      	beq.n	8000224 <HAL_GPIO_EXTI_Callback+0x2c>
			RC_START[RC_CH1] = micros;
 800021a:	4b6d      	ldr	r3, [pc, #436]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a6d      	ldr	r2, [pc, #436]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	e00a      	b.n	800023a <HAL_GPIO_EXTI_Callback+0x42>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH1]);
 8000224:	4b6a      	ldr	r3, [pc, #424]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b6a      	ldr	r3, [pc, #424]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	b29b      	uxth	r3, r3
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	82fb      	strh	r3, [r7, #22]
			RC_SHARED[RC_CH1] = rc_compare;
 8000234:	4a68      	ldr	r2, [pc, #416]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000236:	8afb      	ldrh	r3, [r7, #22]
 8000238:	8013      	strh	r3, [r2, #0]
		}
	}
	if(GPIO_Pin == RC_CH2_INPUT) {
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000240:	d117      	bne.n	8000272 <HAL_GPIO_EXTI_Callback+0x7a>
		if(HAL_GPIO_ReadPin(RC_CH2_PORT, RC_CH2_INPUT)){
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	4861      	ldr	r0, [pc, #388]	; (80003cc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000248:	f001 f84c 	bl	80012e4 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d004      	beq.n	800025c <HAL_GPIO_EXTI_Callback+0x64>
			RC_START[RC_CH2] = micros;
 8000252:	4b5f      	ldr	r3, [pc, #380]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a5f      	ldr	r2, [pc, #380]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000258:	6053      	str	r3, [r2, #4]
 800025a:	e00a      	b.n	8000272 <HAL_GPIO_EXTI_Callback+0x7a>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH2]);
 800025c:	4b5c      	ldr	r3, [pc, #368]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	b29a      	uxth	r2, r3
 8000262:	4b5c      	ldr	r3, [pc, #368]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	b29b      	uxth	r3, r3
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	82bb      	strh	r3, [r7, #20]
			RC_SHARED[RC_CH2] = rc_compare;
 800026c:	4a5a      	ldr	r2, [pc, #360]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800026e:	8abb      	ldrh	r3, [r7, #20]
 8000270:	8053      	strh	r3, [r2, #2]
		}
	}
	if(GPIO_Pin == RC_CH3_INPUT) {
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	2b80      	cmp	r3, #128	; 0x80
 8000276:	d116      	bne.n	80002a6 <HAL_GPIO_EXTI_Callback+0xae>
		if(HAL_GPIO_ReadPin(RC_CH3_PORT, RC_CH3_INPUT)){
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	4858      	ldr	r0, [pc, #352]	; (80003dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 800027c:	f001 f832 	bl	80012e4 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d004      	beq.n	8000290 <HAL_GPIO_EXTI_Callback+0x98>
			RC_START[RC_CH3] = micros;
 8000286:	4b52      	ldr	r3, [pc, #328]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a52      	ldr	r2, [pc, #328]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800028c:	6093      	str	r3, [r2, #8]
 800028e:	e00a      	b.n	80002a6 <HAL_GPIO_EXTI_Callback+0xae>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH3]);
 8000290:	4b4f      	ldr	r3, [pc, #316]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	b29a      	uxth	r2, r3
 8000296:	4b4f      	ldr	r3, [pc, #316]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	b29b      	uxth	r3, r3
 800029c:	1ad3      	subs	r3, r2, r3
 800029e:	827b      	strh	r3, [r7, #18]
			RC_SHARED[RC_CH3] = rc_compare;
 80002a0:	4a4d      	ldr	r2, [pc, #308]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80002a2:	8a7b      	ldrh	r3, [r7, #18]
 80002a4:	8093      	strh	r3, [r2, #4]
		}
	}
	if(GPIO_Pin == RC_CH4_INPUT) {
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	2b40      	cmp	r3, #64	; 0x40
 80002aa:	d116      	bne.n	80002da <HAL_GPIO_EXTI_Callback+0xe2>
		if(HAL_GPIO_ReadPin(RC_CH4_PORT, RC_CH4_INPUT)){
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	484b      	ldr	r0, [pc, #300]	; (80003dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 80002b0:	f001 f818 	bl	80012e4 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d004      	beq.n	80002c4 <HAL_GPIO_EXTI_Callback+0xcc>
			RC_START[RC_CH4] = micros;
 80002ba:	4b45      	ldr	r3, [pc, #276]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a45      	ldr	r2, [pc, #276]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80002c0:	60d3      	str	r3, [r2, #12]
 80002c2:	e00a      	b.n	80002da <HAL_GPIO_EXTI_Callback+0xe2>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH4]);
 80002c4:	4b42      	ldr	r3, [pc, #264]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	4b42      	ldr	r3, [pc, #264]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	823b      	strh	r3, [r7, #16]
			RC_SHARED[RC_CH4] = rc_compare;
 80002d4:	4a40      	ldr	r2, [pc, #256]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80002d6:	8a3b      	ldrh	r3, [r7, #16]
 80002d8:	80d3      	strh	r3, [r2, #6]
		}
	}
	if(GPIO_Pin == RC_CH5_INPUT) {
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	2b20      	cmp	r3, #32
 80002de:	d116      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0x116>
		if(HAL_GPIO_ReadPin(RC_CH5_PORT, RC_CH5_INPUT)){
 80002e0:	2120      	movs	r1, #32
 80002e2:	483a      	ldr	r0, [pc, #232]	; (80003cc <HAL_GPIO_EXTI_Callback+0x1d4>)
 80002e4:	f000 fffe 	bl	80012e4 <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d004      	beq.n	80002f8 <HAL_GPIO_EXTI_Callback+0x100>
			RC_START[RC_CH5] = micros;
 80002ee:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80002f4:	6113      	str	r3, [r2, #16]
 80002f6:	e00a      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x116>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH5]);
 80002f8:	4b35      	ldr	r3, [pc, #212]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	b29a      	uxth	r2, r3
 80002fe:	4b35      	ldr	r3, [pc, #212]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	b29b      	uxth	r3, r3
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	81fb      	strh	r3, [r7, #14]
			RC_SHARED[RC_CH5] = rc_compare;
 8000308:	4a33      	ldr	r2, [pc, #204]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800030a:	89fb      	ldrh	r3, [r7, #14]
 800030c:	8113      	strh	r3, [r2, #8]
		}
	}
	if(GPIO_Pin == RC_CH6_INPUT) {
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	2b10      	cmp	r3, #16
 8000312:	d116      	bne.n	8000342 <HAL_GPIO_EXTI_Callback+0x14a>
		if(HAL_GPIO_ReadPin(RC_CH6_PORT, RC_CH6_INPUT)){
 8000314:	2110      	movs	r1, #16
 8000316:	482d      	ldr	r0, [pc, #180]	; (80003cc <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000318:	f000 ffe4 	bl	80012e4 <HAL_GPIO_ReadPin>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d004      	beq.n	800032c <HAL_GPIO_EXTI_Callback+0x134>
			RC_START[RC_CH6] = micros;
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a2b      	ldr	r2, [pc, #172]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	e00a      	b.n	8000342 <HAL_GPIO_EXTI_Callback+0x14a>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH6]);
 800032c:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	b29b      	uxth	r3, r3
 8000338:	1ad3      	subs	r3, r2, r3
 800033a:	81bb      	strh	r3, [r7, #12]
			RC_SHARED[RC_CH6] = rc_compare;
 800033c:	4a26      	ldr	r2, [pc, #152]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800033e:	89bb      	ldrh	r3, [r7, #12]
 8000340:	8153      	strh	r3, [r2, #10]
		}
	}
	if(GPIO_Pin == RC_CH7_INPUT) {
 8000342:	88fb      	ldrh	r3, [r7, #6]
 8000344:	2b08      	cmp	r3, #8
 8000346:	d116      	bne.n	8000376 <HAL_GPIO_EXTI_Callback+0x17e>
		if(HAL_GPIO_ReadPin(RC_CH7_PORT, RC_CH7_INPUT)){
 8000348:	2108      	movs	r1, #8
 800034a:	4820      	ldr	r0, [pc, #128]	; (80003cc <HAL_GPIO_EXTI_Callback+0x1d4>)
 800034c:	f000 ffca 	bl	80012e4 <HAL_GPIO_ReadPin>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d004      	beq.n	8000360 <HAL_GPIO_EXTI_Callback+0x168>
			RC_START[RC_CH7] = micros;
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	e00a      	b.n	8000376 <HAL_GPIO_EXTI_Callback+0x17e>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH7]);
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	b29a      	uxth	r2, r3
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	b29b      	uxth	r3, r3
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	817b      	strh	r3, [r7, #10]
			RC_SHARED[RC_CH7] = rc_compare;
 8000370:	4a19      	ldr	r2, [pc, #100]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000372:	897b      	ldrh	r3, [r7, #10]
 8000374:	8193      	strh	r3, [r2, #12]
		}
	}
	if(GPIO_Pin == RC_CH8_INPUT) {
 8000376:	88fb      	ldrh	r3, [r7, #6]
 8000378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800037c:	d117      	bne.n	80003ae <HAL_GPIO_EXTI_Callback+0x1b6>
		if(HAL_GPIO_ReadPin(RC_CH8_PORT, RC_CH8_INPUT)){
 800037e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000382:	4816      	ldr	r0, [pc, #88]	; (80003dc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000384:	f000 ffae 	bl	80012e4 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d004      	beq.n	8000398 <HAL_GPIO_EXTI_Callback+0x1a0>
			RC_START[RC_CH8] = micros;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	e00a      	b.n	80003ae <HAL_GPIO_EXTI_Callback+0x1b6>
		}else{
			uint16_t rc_compare = (uint16_t)(micros - RC_START[RC_CH8]);
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	b29a      	uxth	r2, r3
 800039e:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	813b      	strh	r3, [r7, #8]
			RC_SHARED[RC_CH8] = rc_compare;
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80003aa:	893b      	ldrh	r3, [r7, #8]
 80003ac:	81d3      	strh	r3, [r2, #14]
		}
	}
	if(RC_SHARED[RC_CH7] > 70) RC_State = RC_OFF;
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80003b0:	899b      	ldrh	r3, [r3, #12]
 80003b2:	2b46      	cmp	r3, #70	; 0x46
 80003b4:	d903      	bls.n	80003be <HAL_GPIO_EXTI_Callback+0x1c6>
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
	else RC_State = RC_ON;
}
 80003bc:	e002      	b.n	80003c4 <HAL_GPIO_EXTI_Callback+0x1cc>
	else RC_State = RC_ON;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	2000017c 	.word	0x2000017c
 80003d4:	2000014c 	.word	0x2000014c
 80003d8:	2000016c 	.word	0x2000016c
 80003dc:	40010800 	.word	0x40010800
 80003e0:	20000148 	.word	0x20000148

080003e4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003f4:	d104      	bne.n	8000400 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    micros ++;
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	4a03      	ldr	r2, [pc, #12]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003fe:	6013      	str	r3, [r2, #0]
  }
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2000017c 	.word	0x2000017c

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b598      	push	{r3, r4, r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 fc72 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f8a6 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f000 fa30 	bl	8000880 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000420:	f000 f8e6 	bl	80005f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000424:	f000 f9d8 	bl	80007d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000428:	f000 fa00 	bl	800082c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800042c:	f000 f988 	bl	8000740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim2);
 8000430:	4846      	ldr	r0, [pc, #280]	; (800054c <main+0x13c>)
 8000432:	f001 fbe7 	bl	8001c04 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000436:	2100      	movs	r1, #0
 8000438:	4845      	ldr	r0, [pc, #276]	; (8000550 <main+0x140>)
 800043a:	f001 fc85 	bl	8001d48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800043e:	2104      	movs	r1, #4
 8000440:	4843      	ldr	r0, [pc, #268]	; (8000550 <main+0x140>)
 8000442:	f001 fc81 	bl	8001d48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000446:	2108      	movs	r1, #8
 8000448:	4841      	ldr	r0, [pc, #260]	; (8000550 <main+0x140>)
 800044a:	f001 fc7d 	bl	8001d48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800044e:	210c      	movs	r1, #12
 8000450:	483f      	ldr	r0, [pc, #252]	; (8000550 <main+0x140>)
 8000452:	f001 fc79 	bl	8001d48 <HAL_TIM_PWM_Start>
	motor(0,0,0,0);
 8000456:	2300      	movs	r3, #0
 8000458:	2200      	movs	r2, #0
 800045a:	2100      	movs	r1, #0
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fe75 	bl	800014c <motor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  z = (110 - RC_SHARED[RC_CH2]) * 300;
 8000462:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <main+0x144>)
 8000464:	885b      	ldrh	r3, [r3, #2]
 8000466:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 800046a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800046e:	fb02 f303 	mul.w	r3, r2, r3
 8000472:	4a39      	ldr	r2, [pc, #228]	; (8000558 <main+0x148>)
 8000474:	6013      	str	r3, [r2, #0]
	  x = -(110 - RC_SHARED[RC_CH1] - 25) * 100;
 8000476:	4b37      	ldr	r3, [pc, #220]	; (8000554 <main+0x144>)
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	3b55      	subs	r3, #85	; 0x55
 800047c:	2264      	movs	r2, #100	; 0x64
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	4a36      	ldr	r2, [pc, #216]	; (800055c <main+0x14c>)
 8000484:	6013      	str	r3, [r2, #0]
	  y = -(110 - RC_SHARED[RC_CH3] - 27) * 100;
 8000486:	4b33      	ldr	r3, [pc, #204]	; (8000554 <main+0x144>)
 8000488:	889b      	ldrh	r3, [r3, #4]
 800048a:	3b53      	subs	r3, #83	; 0x53
 800048c:	2264      	movs	r2, #100	; 0x64
 800048e:	fb02 f303 	mul.w	r3, r2, r3
 8000492:	4a33      	ldr	r2, [pc, #204]	; (8000560 <main+0x150>)
 8000494:	6013      	str	r3, [r2, #0]
	  if(x >= -400 && x <= 400) x = 0;
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <main+0x14c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800049e:	db07      	blt.n	80004b0 <main+0xa0>
 80004a0:	4b2e      	ldr	r3, [pc, #184]	; (800055c <main+0x14c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80004a8:	dc02      	bgt.n	80004b0 <main+0xa0>
 80004aa:	4b2c      	ldr	r3, [pc, #176]	; (800055c <main+0x14c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
	  if(y >= -400 && y <= 400) y = 0;
 80004b0:	4b2b      	ldr	r3, [pc, #172]	; (8000560 <main+0x150>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80004b8:	db07      	blt.n	80004ca <main+0xba>
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <main+0x150>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80004c2:	dc02      	bgt.n	80004ca <main+0xba>
 80004c4:	4b26      	ldr	r3, [pc, #152]	; (8000560 <main+0x150>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
	  if(z < 0) z = 0;
 80004ca:	4b23      	ldr	r3, [pc, #140]	; (8000558 <main+0x148>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	da02      	bge.n	80004d8 <main+0xc8>
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <main+0x148>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	  if(z == 0) {x = 0; y = 0;}
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <main+0x148>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d105      	bne.n	80004ec <main+0xdc>
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <main+0x14c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <main+0x150>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]

	  if(RC_State == RC_ON){
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <main+0x154>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d123      	bne.n	800053c <main+0x12c>
//		  motor(z,z,z,z);
		  motor(
			  z - y - x,
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0x148>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <main+0x150>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	1ad2      	subs	r2, r2, r3
		  motor(
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <main+0x14c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	1ad0      	subs	r0, r2, r3
			  z + y - x,
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <main+0x148>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <main+0x150>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	441a      	add	r2, r3
		  motor(
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <main+0x14c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1ad1      	subs	r1, r2, r3
			  z + y + x,
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0x148>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <main+0x150>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	441a      	add	r2, r3
		  motor(
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <main+0x14c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	18d4      	adds	r4, r2, r3
			  z - y + x
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x148>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0x150>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	1ad2      	subs	r2, r2, r3
		  motor(
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <main+0x14c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4622      	mov	r2, r4
 8000536:	f7ff fe09 	bl	800014c <motor>
 800053a:	e792      	b.n	8000462 <main+0x52>
		  );
	  }
	  else{
		  motor(0,0,0,0);
 800053c:	2300      	movs	r3, #0
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff fe02 	bl	800014c <motor>
	  z = (110 - RC_SHARED[RC_CH2]) * 300;
 8000548:	e78b      	b.n	8000462 <main+0x52>
 800054a:	bf00      	nop
 800054c:	20000070 	.word	0x20000070
 8000550:	20000028 	.word	0x20000028
 8000554:	2000016c 	.word	0x2000016c
 8000558:	20000180 	.word	0x20000180
 800055c:	20000184 	.word	0x20000184
 8000560:	20000188 	.word	0x20000188
 8000564:	20000148 	.word	0x20000148

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b090      	sub	sp, #64	; 0x40
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fba6 	bl	8002cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fec8 	bl	8001344 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005ba:	f000 f9d5 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f935 	bl	8001848 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e4:	f000 f9c0 	bl	8000968 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3740      	adds	r7, #64	; 0x40
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b092      	sub	sp, #72	; 0x48
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
 8000612:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2220      	movs	r2, #32
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fb54 	bl	8002cc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000620:	4b45      	ldr	r3, [pc, #276]	; (8000738 <MX_TIM1_Init+0x148>)
 8000622:	4a46      	ldr	r2, [pc, #280]	; (800073c <MX_TIM1_Init+0x14c>)
 8000624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000626:	4b44      	ldr	r3, [pc, #272]	; (8000738 <MX_TIM1_Init+0x148>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b42      	ldr	r3, [pc, #264]	; (8000738 <MX_TIM1_Init+0x148>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <MX_TIM1_Init+0x148>)
 8000634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <MX_TIM1_Init+0x148>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000640:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <MX_TIM1_Init+0x148>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <MX_TIM1_Init+0x148>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800064c:	483a      	ldr	r0, [pc, #232]	; (8000738 <MX_TIM1_Init+0x148>)
 800064e:	f001 fb2b 	bl	8001ca8 <HAL_TIM_PWM_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000658:	f000 f986 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000668:	4619      	mov	r1, r3
 800066a:	4833      	ldr	r0, [pc, #204]	; (8000738 <MX_TIM1_Init+0x148>)
 800066c:	f002 f968 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000676:	f000 f977 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067a:	2360      	movs	r3, #96	; 0x60
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000682:	2300      	movs	r3, #0
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	4826      	ldr	r0, [pc, #152]	; (8000738 <MX_TIM1_Init+0x148>)
 80006a0:	f001 fcfc 	bl	800209c <HAL_TIM_PWM_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80006aa:	f000 f95d 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	2204      	movs	r2, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	4820      	ldr	r0, [pc, #128]	; (8000738 <MX_TIM1_Init+0x148>)
 80006b8:	f001 fcf0 	bl	800209c <HAL_TIM_PWM_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80006c2:	f000 f951 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	2208      	movs	r2, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	481a      	ldr	r0, [pc, #104]	; (8000738 <MX_TIM1_Init+0x148>)
 80006d0:	f001 fce4 	bl	800209c <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80006da:	f000 f945 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	220c      	movs	r2, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <MX_TIM1_Init+0x148>)
 80006e8:	f001 fcd8 	bl	800209c <HAL_TIM_PWM_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80006f2:	f000 f939 	bl	8000968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM1_Init+0x148>)
 800071a:	f002 f96f 	bl	80029fc <HAL_TIMEx_ConfigBreakDeadTime>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000724:	f000 f920 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM1_Init+0x148>)
 800072a:	f000 f997 	bl	8000a5c <HAL_TIM_MspPostInit>

}
 800072e:	bf00      	nop
 8000730:	3748      	adds	r7, #72	; 0x48
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028
 800073c:	40012c00 	.word	0x40012c00

08000740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_TIM2_Init+0x94>)
 800075e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000762:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_TIM2_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM2_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 128;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM2_Init+0x94>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_TIM2_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM2_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <MX_TIM2_Init+0x94>)
 8000784:	f001 f9ee 	bl	8001b64 <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f8eb 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_TIM2_Init+0x94>)
 80007a0:	f001 fd3e 	bl	8002220 <HAL_TIM_ConfigClockSource>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 f8dd 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_TIM2_Init+0x94>)
 80007bc:	f002 f8c0 	bl	8002940 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007c6:	f000 f8cf 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000070 	.word	0x20000070

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_USART1_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USART1_UART_Init+0x4c>)
 8000810:	f002 f957 	bl	8002ac2 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f8a5 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000b8 	.word	0x200000b8
 8000828:	40013800 	.word	0x40013800

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f002 f92d 	bl	8002ac2 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f87b 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000100 	.word	0x20000100
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_GPIO_Init+0xd8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <MX_GPIO_Init+0xd8>)
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_GPIO_Init+0xd8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <MX_GPIO_Init+0xd8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a29      	ldr	r2, [pc, #164]	; (8000958 <MX_GPIO_Init+0xd8>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_GPIO_Init+0xd8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0xd8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_GPIO_Init+0xd8>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_GPIO_Init+0xd8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA6 PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80008dc:	f248 03c0 	movw	r3, #32960	; 0x80c0
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_GPIO_Init+0xdc>)
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0xe0>)
 80008f2:	f000 fb73 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80008f6:	f44f 734e 	mov.w	r3, #824	; 0x338
 80008fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_GPIO_Init+0xdc>)
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4816      	ldr	r0, [pc, #88]	; (8000964 <MX_GPIO_Init+0xe4>)
 800090c:	f000 fb66 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	2009      	movs	r0, #9
 8000916:	f000 fb2a 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800091a:	2009      	movs	r0, #9
 800091c:	f000 fb43 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	200a      	movs	r0, #10
 8000926:	f000 fb22 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fb3b 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2017      	movs	r0, #23
 8000936:	f000 fb1a 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800093a:	2017      	movs	r0, #23
 800093c:	f000 fb33 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2028      	movs	r0, #40	; 0x28
 8000946:	f000 fb12 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094a:	2028      	movs	r0, #40	; 0x28
 800094c:	f000 fb2b 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	10310000 	.word	0x10310000
 8000960:	40010800 	.word	0x40010800
 8000964:	40010c00 	.word	0x40010c00

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_MspInit+0x5c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_MspInit+0x5c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_MspInit+0x5c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_MspInit+0x5c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_MspInit+0x5c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_MspInit+0x5c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_MspInit+0x60>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_MspInit+0x60>)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000

080009d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <HAL_TIM_PWM_MspInit+0x34>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d10b      	bne.n	8000a02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_TIM_PWM_MspInit+0x38>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_TIM_PWM_MspInit+0x38>)
 80009f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_TIM_PWM_MspInit+0x38>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40012c00 	.word	0x40012c00
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a24:	d113      	bne.n	8000a4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_TIM_Base_MspInit+0x44>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <HAL_TIM_Base_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_TIM_Base_MspInit+0x44>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	201c      	movs	r0, #28
 8000a44:	f000 fa93 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a48:	201c      	movs	r0, #28
 8000a4a:	f000 faac 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_TIM_MspPostInit+0x5c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d118      	bne.n	8000aae <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_TIM_MspPostInit+0x60>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_TIM_MspPostInit+0x60>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_TIM_MspPostInit+0x60>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a94:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_TIM_MspPostInit+0x64>)
 8000aaa:	f000 fa97 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a3d      	ldr	r2, [pc, #244]	; (8000bd4 <HAL_UART_MspInit+0x110>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d13e      	bne.n	8000b62 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a3b      	ldr	r2, [pc, #236]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a35      	ldr	r2, [pc, #212]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b14:	2340      	movs	r3, #64	; 0x40
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	482d      	ldr	r0, [pc, #180]	; (8000bdc <HAL_UART_MspInit+0x118>)
 8000b28:	f000 fa58 	bl	8000fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4827      	ldr	r0, [pc, #156]	; (8000bdc <HAL_UART_MspInit+0x118>)
 8000b40:	f000 fa4c 	bl	8000fdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <HAL_UART_MspInit+0x11c>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b5a:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <HAL_UART_MspInit+0x11c>)
 8000b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b60:	e034      	b.n	8000bcc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <HAL_UART_MspInit+0x120>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d12f      	bne.n	8000bcc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	61d3      	str	r3, [r2, #28]
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0x114>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <HAL_UART_MspInit+0x124>)
 8000bb0:	f000 fa14 	bl	8000fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <HAL_UART_MspInit+0x124>)
 8000bc8:	f000 fa08 	bl	8000fdc <HAL_GPIO_Init>
}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40010800 	.word	0x40010800

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f000 f8a9 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c3e:	2008      	movs	r0, #8
 8000c40:	f000 fb68 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c4c:	2010      	movs	r0, #16
 8000c4e:	f000 fb61 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c5a:	2020      	movs	r0, #32
 8000c5c:	f000 fb5a 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c60:	2040      	movs	r0, #64	; 0x40
 8000c62:	f000 fb57 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000c66:	2080      	movs	r0, #128	; 0x80
 8000c68:	f000 fb54 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c70:	f000 fb50 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000c74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c78:	f000 fb4c 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM2_IRQHandler+0x10>)
 8000c86:	f001 f901 	bl	8001e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000070 	.word	0x20000070

08000c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c9c:	f000 fb3a 	bl	8001314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff fff8 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cb6:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ccc:	4c09      	ldr	r4, [pc, #36]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f001 ffd1 	bl	8002c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cde:	f7ff fb97 	bl	8000410 <main>
  bx lr
 8000ce2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cec:	08002d24 	.word	0x08002d24
  ldr r2, =_sbss
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf4:	20000190 	.word	0x20000190

08000cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC1_2_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x28>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x28>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f923 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe2c 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f93b 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f903 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x20>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <HAL_IncTick+0x20>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000008 	.word	0x20000008
 8000da8:	2000018c 	.word	0x2000018c

08000dac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	2000018c 	.word	0x2000018c

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4906      	ldr	r1, [pc, #24]	; (8000e58 <__NVIC_EnableIRQ+0x34>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff90 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff2d 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff42 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff90 	bl	8000eb0 <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5f 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff35 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e169      	b.n	80012c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8158 	bne.w	80012be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4a9a      	ldr	r2, [pc, #616]	; (800127c <HAL_GPIO_Init+0x2a0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d05e      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001018:	4a98      	ldr	r2, [pc, #608]	; (800127c <HAL_GPIO_Init+0x2a0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d875      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800101e:	4a98      	ldr	r2, [pc, #608]	; (8001280 <HAL_GPIO_Init+0x2a4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d058      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001024:	4a96      	ldr	r2, [pc, #600]	; (8001280 <HAL_GPIO_Init+0x2a4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d86f      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800102a:	4a96      	ldr	r2, [pc, #600]	; (8001284 <HAL_GPIO_Init+0x2a8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d052      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001030:	4a94      	ldr	r2, [pc, #592]	; (8001284 <HAL_GPIO_Init+0x2a8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d869      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001036:	4a94      	ldr	r2, [pc, #592]	; (8001288 <HAL_GPIO_Init+0x2ac>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d04c      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 800103c:	4a92      	ldr	r2, [pc, #584]	; (8001288 <HAL_GPIO_Init+0x2ac>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d863      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001042:	4a92      	ldr	r2, [pc, #584]	; (800128c <HAL_GPIO_Init+0x2b0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d046      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001048:	4a90      	ldr	r2, [pc, #576]	; (800128c <HAL_GPIO_Init+0x2b0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d85d      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800104e:	2b12      	cmp	r3, #18
 8001050:	d82a      	bhi.n	80010a8 <HAL_GPIO_Init+0xcc>
 8001052:	2b12      	cmp	r3, #18
 8001054:	d859      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <HAL_GPIO_Init+0x80>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	080010d7 	.word	0x080010d7
 8001060:	080010b1 	.word	0x080010b1
 8001064:	080010c3 	.word	0x080010c3
 8001068:	08001105 	.word	0x08001105
 800106c:	0800110b 	.word	0x0800110b
 8001070:	0800110b 	.word	0x0800110b
 8001074:	0800110b 	.word	0x0800110b
 8001078:	0800110b 	.word	0x0800110b
 800107c:	0800110b 	.word	0x0800110b
 8001080:	0800110b 	.word	0x0800110b
 8001084:	0800110b 	.word	0x0800110b
 8001088:	0800110b 	.word	0x0800110b
 800108c:	0800110b 	.word	0x0800110b
 8001090:	0800110b 	.word	0x0800110b
 8001094:	0800110b 	.word	0x0800110b
 8001098:	0800110b 	.word	0x0800110b
 800109c:	0800110b 	.word	0x0800110b
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010cd 	.word	0x080010cd
 80010a8:	4a79      	ldr	r2, [pc, #484]	; (8001290 <HAL_GPIO_Init+0x2b4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ae:	e02c      	b.n	800110a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e029      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	3304      	adds	r3, #4
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e024      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e01f      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	330c      	adds	r3, #12
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e01a      	b.n	800110c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010de:	2304      	movs	r3, #4
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e013      	b.n	800110c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	611a      	str	r2, [r3, #16]
          break;
 80010f6:	e009      	b.n	800110c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	615a      	str	r2, [r3, #20]
          break;
 8001102:	e003      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x130>
          break;
 800110a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2bff      	cmp	r3, #255	; 0xff
 8001110:	d801      	bhi.n	8001116 <HAL_GPIO_Init+0x13a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	e001      	b.n	800111a <HAL_GPIO_Init+0x13e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3304      	adds	r3, #4
 800111a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2bff      	cmp	r3, #255	; 0xff
 8001120:	d802      	bhi.n	8001128 <HAL_GPIO_Init+0x14c>
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	e002      	b.n	800112e <HAL_GPIO_Init+0x152>
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3b08      	subs	r3, #8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	210f      	movs	r1, #15
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	6a39      	ldr	r1, [r7, #32]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 80b1 	beq.w	80012be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115c:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001174:	4a48      	ldr	r2, [pc, #288]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_GPIO_Init+0x2c0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d013      	beq.n	80011c8 <HAL_GPIO_Init+0x1ec>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d00d      	beq.n	80011c4 <HAL_GPIO_Init+0x1e8>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <HAL_GPIO_Init+0x2c8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d007      	beq.n	80011c0 <HAL_GPIO_Init+0x1e4>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a3d      	ldr	r2, [pc, #244]	; (80012a8 <HAL_GPIO_Init+0x2cc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d101      	bne.n	80011bc <HAL_GPIO_Init+0x1e0>
 80011b8:	2303      	movs	r3, #3
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011bc:	2304      	movs	r3, #4
 80011be:	e004      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c8:	2300      	movs	r3, #0
 80011ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4093      	lsls	r3, r2
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011da:	492f      	ldr	r1, [pc, #188]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	492c      	ldr	r1, [pc, #176]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4928      	ldr	r1, [pc, #160]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800120c:	4013      	ands	r3, r2
 800120e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	4922      	ldr	r1, [pc, #136]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	60cb      	str	r3, [r1, #12]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	491e      	ldr	r1, [pc, #120]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001234:	4013      	ands	r3, r2
 8001236:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4918      	ldr	r1, [pc, #96]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	4914      	ldr	r1, [pc, #80]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800125c:	4013      	ands	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d021      	beq.n	80012b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	490e      	ldr	r1, [pc, #56]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e021      	b.n	80012be <HAL_GPIO_Init+0x2e2>
 800127a:	bf00      	nop
 800127c:	10320000 	.word	0x10320000
 8001280:	10310000 	.word	0x10310000
 8001284:	10220000 	.word	0x10220000
 8001288:	10210000 	.word	0x10210000
 800128c:	10120000 	.word	0x10120000
 8001290:	10110000 	.word	0x10110000
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40011000 	.word	0x40011000
 80012a8:	40011400 	.word	0x40011400
 80012ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_GPIO_Init+0x304>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	4909      	ldr	r1, [pc, #36]	; (80012e0 <HAL_GPIO_Init+0x304>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f47f ae8e 	bne.w	8000ff0 <HAL_GPIO_Init+0x14>
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	372c      	adds	r7, #44	; 0x2c
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e001      	b.n	8001306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
	...

08001314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff60 	bl	80001f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e272      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8087 	beq.w	8001472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b04      	cmp	r3, #4
 800136e:	d00c      	beq.n	800138a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001370:	4b8f      	ldr	r3, [pc, #572]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	d112      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5e>
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d10b      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	4b89      	ldr	r3, [pc, #548]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d06c      	beq.n	8001470 <HAL_RCC_OscConfig+0x12c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d168      	bne.n	8001470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e24c      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x76>
 80013ac:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a7f      	ldr	r2, [pc, #508]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e02e      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x98>
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a77      	ldr	r2, [pc, #476]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0xbc>
 80013e6:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a71      	ldr	r2, [pc, #452]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 8001400:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6a      	ldr	r2, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a67      	ldr	r2, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fcc4 	bl	8000dac <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fcc0 	bl	8000dac <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e200      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xe4>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fcb0 	bl	8000dac <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fcac 	bl	8000dac <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1ec      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x10c>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d063      	beq.n	8001546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147e:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d11c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x18c>
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x176>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1c0      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4939      	ldr	r1, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	e03a      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fc65 	bl	8000dac <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc61 	bl	8000dac <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1a1      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fc44 	bl	8000dac <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fc40 	bl	8000dac <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e180      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03a      	beq.n	80015c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d019      	beq.n	800158e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fc24 	bl	8000dac <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc20 	bl	8000dac <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e160      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f000 face 	bl	8001b28 <RCC_Delay>
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fc0a 	bl	8000dac <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159a:	e00f      	b.n	80015bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fc06 	bl	8000dac <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d908      	bls.n	80015bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e146      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	42420000 	.word	0x42420000
 80015b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1e9      	bne.n	800159c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a6 	beq.w	8001722 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015da:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a87      	ldr	r2, [pc, #540]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b85      	ldr	r3, [pc, #532]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7e      	ldr	r2, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fbc7 	bl	8000dac <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fbc3 	bl	8000dac <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e103      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x312>
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a6e      	ldr	r2, [pc, #440]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	e02d      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x334>
 800165e:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a69      	ldr	r2, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4b67      	ldr	r3, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a66      	ldr	r2, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x356>
 8001680:	4b61      	ldr	r3, [pc, #388]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a60      	ldr	r2, [pc, #384]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a5d      	ldr	r2, [pc, #372]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 800169a:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a5a      	ldr	r2, [pc, #360]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb77 	bl	8000dac <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb73 	bl	8000dac <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0b1      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x37e>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb61 	bl	8000dac <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fb5d 	bl	8000dac <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e09b      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a3b      	ldr	r2, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8087 	beq.w	800183a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d061      	beq.n	80017fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d146      	bne.n	80017ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb31 	bl	8000dac <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb2d 	bl	8000dac <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e06d      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d108      	bne.n	8001788 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4921      	ldr	r1, [pc, #132]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a19      	ldr	r1, [r3, #32]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	430b      	orrs	r3, r1
 800179a:	491b      	ldr	r1, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fb01 	bl	8000dac <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fafd 	bl	8000dac <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e03d      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x46a>
 80017cc:	e035      	b.n	800183a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff faea 	bl	8000dac <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fae6 	bl	8000dac <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e026      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x498>
 80017fa:	e01e      	b.n	800183a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e019      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
 8001808:	40021000 	.word	0x40021000
 800180c:	40007000 	.word	0x40007000
 8001810:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_OscConfig+0x500>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	429a      	cmp	r2, r3
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0d0      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d910      	bls.n	800188c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0207 	bic.w	r2, r3, #7
 8001872:	4965      	ldr	r1, [pc, #404]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d040      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e073      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06b      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4936      	ldr	r1, [pc, #216]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff fa38 	bl	8000dac <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff fa34 	bl	8000dac <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e053      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d210      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4922      	ldr	r1, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d6:	f000 f821 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	5ccb      	ldrb	r3, [r1, r3]
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1cc>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1d0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f996 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08002cf0 	.word	0x08002cf0
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x30>
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x36>
 8001a4a:	e027      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a4e:	613b      	str	r3, [r7, #16]
      break;
 8001a50:	e027      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	0c5b      	lsrs	r3, r3, #17
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7e:	fb03 f202 	mul.w	r2, r3, r2
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e004      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	613b      	str	r3, [r7, #16]
      break;
 8001a9a:	e002      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9e:	613b      	str	r3, [r7, #16]
      break;
 8001aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa2:	693b      	ldr	r3, [r7, #16]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	007a1200 	.word	0x007a1200
 8001ab8:	08002d08 	.word	0x08002d08
 8001abc:	08002d18 	.word	0x08002d18
 8001ac0:	003d0900 	.word	0x003d0900

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001adc:	f7ff fff2 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4903      	ldr	r1, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08002d00 	.word	0x08002d00

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	0adb      	lsrs	r3, r3, #11
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08002d00 	.word	0x08002d00

08001b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <RCC_Delay+0x34>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <RCC_Delay+0x38>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0a5b      	lsrs	r3, r3, #9
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b44:	bf00      	nop
  }
  while (Delay --);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1e5a      	subs	r2, r3, #1
 8001b4a:	60fa      	str	r2, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f9      	bne.n	8001b44 <RCC_Delay+0x1c>
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	10624dd3 	.word	0x10624dd3

08001b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e041      	b.n	8001bfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe ff42 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f000 fc28 	bl	80023f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e03a      	b.n	8001c92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_TIM_Base_Start_IT+0x98>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00e      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x58>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c46:	d009      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x58>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x58>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d010      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7e:	e007      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fe82 	bl	80009d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 fb86 	bl	80023f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_TIM_PWM_Start+0x24>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	e022      	b.n	8001db2 <HAL_TIM_PWM_Start+0x6a>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d109      	bne.n	8001d86 <HAL_TIM_PWM_Start+0x3e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	e015      	b.n	8001db2 <HAL_TIM_PWM_Start+0x6a>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d109      	bne.n	8001da0 <HAL_TIM_PWM_Start+0x58>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e008      	b.n	8001db2 <HAL_TIM_PWM_Start+0x6a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e05e      	b.n	8001e78 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_PWM_Start+0x82>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	e013      	b.n	8001df2 <HAL_TIM_PWM_Start+0xaa>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d104      	bne.n	8001dda <HAL_TIM_PWM_Start+0x92>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd8:	e00b      	b.n	8001df2 <HAL_TIM_PWM_Start+0xaa>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d104      	bne.n	8001dea <HAL_TIM_PWM_Start+0xa2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	e003      	b.n	8001df2 <HAL_TIM_PWM_Start+0xaa>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fd7c 	bl	80028f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_TIM_PWM_Start+0x138>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d107      	bne.n	8001e1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <HAL_TIM_PWM_Start+0x138>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00e      	beq.n	8001e42 <HAL_TIM_PWM_Start+0xfa>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d009      	beq.n	8001e42 <HAL_TIM_PWM_Start+0xfa>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <HAL_TIM_PWM_Start+0x13c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d004      	beq.n	8001e42 <HAL_TIM_PWM_Start+0xfa>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <HAL_TIM_PWM_Start+0x140>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d111      	bne.n	8001e66 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	d010      	beq.n	8001e76 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e64:	e007      	b.n	8001e76 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800

08001e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d122      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d11b      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0202 	mvn.w	r2, #2
 8001eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fa76 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa69 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fa78 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d122      	bne.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d11b      	bne.n	8001f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0204 	mvn.w	r2, #4
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fa4c 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fa3f 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fa4e 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d122      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d11b      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0208 	mvn.w	r2, #8
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa22 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa15 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fa24 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d122      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d11b      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0210 	mvn.w	r2, #16
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f9f8 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f9eb 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f9fa 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0201 	mvn.w	r2, #1
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe f9ea 	bl	80003e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b80      	cmp	r3, #128	; 0x80
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fd3a 	bl	8002ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002054:	2b40      	cmp	r3, #64	; 0x40
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f9be 	bl	80023e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b20      	cmp	r3, #32
 8002074:	d10e      	bne.n	8002094 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b20      	cmp	r3, #32
 8002082:	d107      	bne.n	8002094 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0220 	mvn.w	r2, #32
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fd05 	bl	8002a9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e0ae      	b.n	8002218 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	f200 809f 	bhi.w	8002208 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020ca:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	08002105 	.word	0x08002105
 80020d4:	08002209 	.word	0x08002209
 80020d8:	08002209 	.word	0x08002209
 80020dc:	08002209 	.word	0x08002209
 80020e0:	08002145 	.word	0x08002145
 80020e4:	08002209 	.word	0x08002209
 80020e8:	08002209 	.word	0x08002209
 80020ec:	08002209 	.word	0x08002209
 80020f0:	08002187 	.word	0x08002187
 80020f4:	08002209 	.word	0x08002209
 80020f8:	08002209 	.word	0x08002209
 80020fc:	08002209 	.word	0x08002209
 8002100:	080021c7 	.word	0x080021c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f9d6 	bl	80024bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0208 	orr.w	r2, r2, #8
 800211e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6999      	ldr	r1, [r3, #24]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	619a      	str	r2, [r3, #24]
      break;
 8002142:	e064      	b.n	800220e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fa1c 	bl	8002588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800215e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6999      	ldr	r1, [r3, #24]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	021a      	lsls	r2, r3, #8
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	619a      	str	r2, [r3, #24]
      break;
 8002184:	e043      	b.n	800220e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fa65 	bl	800265c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0208 	orr.w	r2, r2, #8
 80021a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0204 	bic.w	r2, r2, #4
 80021b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69d9      	ldr	r1, [r3, #28]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	61da      	str	r2, [r3, #28]
      break;
 80021c4:	e023      	b.n	800220e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 faaf 	bl	8002730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69d9      	ldr	r1, [r3, #28]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	021a      	lsls	r2, r3, #8
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	61da      	str	r2, [r3, #28]
      break;
 8002206:	e002      	b.n	800220e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	75fb      	strb	r3, [r7, #23]
      break;
 800220c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_TIM_ConfigClockSource+0x1c>
 8002238:	2302      	movs	r3, #2
 800223a:	e0b4      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x186>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800225a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002274:	d03e      	beq.n	80022f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227a:	f200 8087 	bhi.w	800238c <HAL_TIM_ConfigClockSource+0x16c>
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	f000 8086 	beq.w	8002392 <HAL_TIM_ConfigClockSource+0x172>
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d87f      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 800228c:	2b70      	cmp	r3, #112	; 0x70
 800228e:	d01a      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002290:	2b70      	cmp	r3, #112	; 0x70
 8002292:	d87b      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 8002294:	2b60      	cmp	r3, #96	; 0x60
 8002296:	d050      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x11a>
 8002298:	2b60      	cmp	r3, #96	; 0x60
 800229a:	d877      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 800229c:	2b50      	cmp	r3, #80	; 0x50
 800229e:	d03c      	beq.n	800231a <HAL_TIM_ConfigClockSource+0xfa>
 80022a0:	2b50      	cmp	r3, #80	; 0x50
 80022a2:	d873      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d058      	beq.n	800235a <HAL_TIM_ConfigClockSource+0x13a>
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d86f      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b30      	cmp	r3, #48	; 0x30
 80022ae:	d064      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022b0:	2b30      	cmp	r3, #48	; 0x30
 80022b2:	d86b      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d060      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d867      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d05c      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d05a      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022c4:	e062      	b.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f000 faf0 	bl	80028ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	609a      	str	r2, [r3, #8]
      break;
 80022f2:	e04f      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f000 fad9 	bl	80028ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002316:	609a      	str	r2, [r3, #8]
      break;
 8002318:	e03c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	461a      	mov	r2, r3
 8002328:	f000 fa50 	bl	80027cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2150      	movs	r1, #80	; 0x50
 8002332:	4618      	mov	r0, r3
 8002334:	f000 faa7 	bl	8002886 <TIM_ITRx_SetConfig>
      break;
 8002338:	e02c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f000 fa6e 	bl	8002828 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2160      	movs	r1, #96	; 0x60
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fa97 	bl	8002886 <TIM_ITRx_SetConfig>
      break;
 8002358:	e01c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 fa30 	bl	80027cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fa87 	bl	8002886 <TIM_ITRx_SetConfig>
      break;
 8002378:	e00c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f000 fa7e 	bl	8002886 <TIM_ITRx_SetConfig>
      break;
 800238a:	e003      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e000      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
	...

080023f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <TIM_Base_SetConfig+0xb8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00b      	beq.n	8002428 <TIM_Base_SetConfig+0x30>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002416:	d007      	beq.n	8002428 <TIM_Base_SetConfig+0x30>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <TIM_Base_SetConfig+0xbc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <TIM_Base_SetConfig+0x30>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <TIM_Base_SetConfig+0xc0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d108      	bne.n	800243a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <TIM_Base_SetConfig+0xb8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00b      	beq.n	800245a <TIM_Base_SetConfig+0x62>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002448:	d007      	beq.n	800245a <TIM_Base_SetConfig+0x62>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <TIM_Base_SetConfig+0xbc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d003      	beq.n	800245a <TIM_Base_SetConfig+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <TIM_Base_SetConfig+0xc0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d108      	bne.n	800246c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <TIM_Base_SetConfig+0xb8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d103      	bne.n	80024a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	615a      	str	r2, [r3, #20]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800

080024bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f023 0201 	bic.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f023 0302 	bic.w	r3, r3, #2
 8002504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <TIM_OC1_SetConfig+0xc8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d10c      	bne.n	8002532 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0308 	bic.w	r3, r3, #8
 800251e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <TIM_OC1_SetConfig+0xc8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d111      	bne.n	800255e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	621a      	str	r2, [r3, #32]
}
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00

08002588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f023 0210 	bic.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f023 0320 	bic.w	r3, r3, #32
 80025d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <TIM_OC2_SetConfig+0xd0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10d      	bne.n	8002604 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a14      	ldr	r2, [pc, #80]	; (8002658 <TIM_OC2_SetConfig+0xd0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d113      	bne.n	8002634 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800261a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00

0800265c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <TIM_OC3_SetConfig+0xd0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10d      	bne.n	80026d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <TIM_OC3_SetConfig+0xd0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d113      	bne.n	8002706 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	621a      	str	r2, [r3, #32]
}
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00

08002730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800277a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	031b      	lsls	r3, r3, #12
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <TIM_OC4_SetConfig+0x98>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d109      	bne.n	80027a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	019b      	lsls	r3, r3, #6
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40012c00 	.word	0x40012c00

080027cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 0201 	bic.w	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f023 030a 	bic.w	r3, r3, #10
 8002808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	621a      	str	r2, [r3, #32]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f023 0210 	bic.w	r2, r3, #16
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002864:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	621a      	str	r2, [r3, #32]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f043 0307 	orr.w	r3, r3, #7
 80028a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b087      	sub	sp, #28
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	431a      	orrs	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	609a      	str	r2, [r3, #8]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2201      	movs	r2, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	43db      	mvns	r3, r3
 800291a:	401a      	ands	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	621a      	str	r2, [r3, #32]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002954:	2302      	movs	r3, #2
 8002956:	e046      	b.n	80029e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00e      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d009      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10c      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800

080029fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e03d      	b.n	8002a94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e042      	b.n	8002b5a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fd ffeb 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2224      	movs	r2, #36	; 0x24
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f82c 	bl	8002b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b9e:	f023 030c 	bic.w	r3, r3, #12
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2c      	ldr	r2, [pc, #176]	; (8002c78 <UART_SetConfig+0x114>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bcc:	f7fe ff98 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	e002      	b.n	8002bda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f7fe ff80 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <UART_SetConfig+0x118>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	0119      	lsls	r1, r3, #4
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	009a      	lsls	r2, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <UART_SetConfig+0x118>)
 8002c12:	fba3 0302 	umull	r0, r3, r3, r2
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2064      	movs	r0, #100	; 0x64
 8002c1a:	fb00 f303 	mul.w	r3, r0, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	3332      	adds	r3, #50	; 0x32
 8002c24:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <UART_SetConfig+0x118>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c30:	4419      	add	r1, r3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <UART_SetConfig+0x118>)
 8002c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2064      	movs	r0, #100	; 0x64
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	3332      	adds	r3, #50	; 0x32
 8002c5c:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <UART_SetConfig+0x118>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	51eb851f 	.word	0x51eb851f

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2600      	movs	r6, #0
 8002c84:	4d0c      	ldr	r5, [pc, #48]	; (8002cb8 <__libc_init_array+0x38>)
 8002c86:	4c0d      	ldr	r4, [pc, #52]	; (8002cbc <__libc_init_array+0x3c>)
 8002c88:	1b64      	subs	r4, r4, r5
 8002c8a:	10a4      	asrs	r4, r4, #2
 8002c8c:	42a6      	cmp	r6, r4
 8002c8e:	d109      	bne.n	8002ca4 <__libc_init_array+0x24>
 8002c90:	f000 f822 	bl	8002cd8 <_init>
 8002c94:	2600      	movs	r6, #0
 8002c96:	4d0a      	ldr	r5, [pc, #40]	; (8002cc0 <__libc_init_array+0x40>)
 8002c98:	4c0a      	ldr	r4, [pc, #40]	; (8002cc4 <__libc_init_array+0x44>)
 8002c9a:	1b64      	subs	r4, r4, r5
 8002c9c:	10a4      	asrs	r4, r4, #2
 8002c9e:	42a6      	cmp	r6, r4
 8002ca0:	d105      	bne.n	8002cae <__libc_init_array+0x2e>
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca8:	4798      	blx	r3
 8002caa:	3601      	adds	r6, #1
 8002cac:	e7ee      	b.n	8002c8c <__libc_init_array+0xc>
 8002cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb2:	4798      	blx	r3
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	e7f2      	b.n	8002c9e <__libc_init_array+0x1e>
 8002cb8:	08002d1c 	.word	0x08002d1c
 8002cbc:	08002d1c 	.word	0x08002d1c
 8002cc0:	08002d1c 	.word	0x08002d1c
 8002cc4:	08002d20 	.word	0x08002d20

08002cc8 <memset>:
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4402      	add	r2, r0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <memset+0xa>
 8002cd0:	4770      	bx	lr
 8002cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd6:	e7f9      	b.n	8002ccc <memset+0x4>

08002cd8 <_init>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr

08002ce4 <_fini>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr
